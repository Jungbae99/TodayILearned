
/*
// 이 Two Pointer 6개의 로직은 제가 풀었던 문제가아닌, 인프런 강의에 있는 풀이이며, 다시 보기위해 정리해둔 파일입니다 
// 두 배열을 합쳐서 오름차순으로 정렬하기
public ArrayList<Integer> solution(int n, int m, int[] a, int[] b) {
		ArrayList<Integer> answer = new ArrayList<>();
		int p1=0, p2=0;
		while(p1<n && p2<m){
			if(a[p1]<b[p2]) answer.add(a[p1++]);
			else answer.add(b[p2++]);
		}
		while(p1<n) answer.add(a[p1++]);
		while(p2<m) answer.add(b[p2++]);
		return answer;
	}
  */
  
  /*
  // 두 배열에서 공통된 원소를 뽑아 추출하기
	public ArrayList<Integer> solution(int n, int m, int[] a, int[] b) {
		ArrayList<Integer> answer = new ArrayList<>();
		Arrays.sort(a);
		Arrays.sort(b);
		int p1=0, p2=0;
		while(p1<n && p2<m){
			if(a[p1]==b[p2]){
				answer.add(a[p1++]);
				p2++;
			}
			else if(a[p1]<b[p2]) p1++;
			else p2++;
		}
		return answer;
  */
  
  /*
  // 정수가 주어졌을때, 그 정수만큼 이어진 배열의 합이 가장 큰 경우 
  public int solution(int n, int k, int[] arr) {
		int answer, sum=0;
		for(int i=0; i<k; i++) sum+=arr[i];
		answer=sum;
		for(int i=k; i<n; i++){
			sum+=(arr[i]-arr[i-k]);
			answer=Math.max(answer, sum);
		}
		return answer;
    */
    
    /* 
    //연속 부분수열의 합이 m이 되는 경우의수
    public int solution(int n, int m, int[] arr) {
		int answer=0, sum=0, lt=0;
		for(int rt=0; rt<n; rt++){
			sum+=arr[rt];
			if(sum==m) answer++;
			while(sum>=m){
				sum-=arr[lt++];
				if(sum==m) answer++; 
			}
		}
		return answer;
    */
    
    /*
    //자연수n이 주어졌을때, 이어진 자연수의 합으로 n이되는 경우의수 
    	public int solution(int n) {
		int answer=0, sum=0;
		int m=n/2+1;
		int[] arr=new int[m];
		for(int i=0; i<m; i++) arr[i]=i+1;
		int lt=0;
		for(int rt=0; rt<m; rt++){
			sum+=arr[rt];
			if(sum==n) answer++;
			while(sum>=n){
				sum-=arr[lt++];
				if(sum==n) answer++; 
			}
		}
		return answer;
    */
    
    /* 
    // 2진수(0101)일때, 0을 1로바꿨을때 가장 길게나오는 수(for문으로도 못 품)
    	public int solution(int n, int k, int[] arr) {
		int answer=0, cnt=0, lt=0;
		for(int rt=0; rt<n; rt++){
			if(arr[rt]==0) cnt++;
			while(cnt>k){
				if(arr[lt]==0) cnt--;
				lt++;
			}
			answer=Math.max(answer, rt-lt+1);
		}
		return answer;
    */
